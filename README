客户端收集数据注入到server端方式---剖析core.py


初次上传客户端数据--》asset_with_no_asset_id(request)
    ass_handler = core.Asset(requset)
    res = ass_handler.get_asset_id_by_sn()获取sn号,将传输过来的数据进行合法性检测
    save_new_asset_to_approval_zone()放入资产带审批区域


更新客户端上传资产信息---》asset_report(request)
    ass_handler = core.Asset(request)
    if ass_handler = core.data_is_valid() 字段合法性检测
    ass_hander.data_inject() 注入数据


core函数作用解释：

class Asset()

    __init__(self,request):初始化数据，将request.post中客户端data数据保存是内存中，其中包括一系列初始化操作
    response_msg(self,msy_type,key,msg):错误信息记录
    mandatory_check(self,data,only_check_sn=False):数据处理合法性检测函数
    get_asset_id_by_sn(self)：新资产汇报执行的函数，其中调用了mandatory_check函数来验证数据合法性，调用save_new_asset_to_approval_zeon()
    data_is_valid(self):更新资产调用的函数，主要作用也是检查字段合法性。保存数据
    __is_new_asset(self):判断是不是新资产，通过asset表中反射数据查看是否产生数据
    data_inject(self):注入到数据库中的接口，通过调用self.create_asset()或者是self.update_asset()来保存或者是更新数据
    data_is_valid_without_id(self,db_obj=Nooe):新资产所走的路线，函数作用也是保存“资产信息”
    reformat_components(self,identify_field,data_set):废弃
    __verify_field(self, data_set, field_key, data_type, required=True)
    create_asset(self)：创建资产，通过反射来创建不同资产类型
    update_asset(self)：更新资产，通过反射来更新不同资产类型
    _update_server(self):更新资源类型为服务器的信息
    _create_server(self):创建资源为服务器类型的信息
    log_handler(asset_obj, event_name, user, detail, component=None)：更新资源时记录的日志
    剩下来的函数一般用于实现各个资源入库的接口


